    - >
        Metaprogramming is _writing code which writes code_.  But not as M.C. Escher would sketch it.  *The program isn't reaching
        back around and overwriting itself, nor is the program jumping onto your screen and wrenching the keyboard from your
        hands.*  No, it's much smaller than that.


        Let's say it's more like *a little orange pill* you won at the circus.  When you suck on it, the coating wears away and
        behind your teeth hatches a massive, floppy sponge brontosaurus.  He slides down your tongue and leaps free, frollicking 
        over the pastures, yelping, "Papa!"  And from then on, whenever he freaks out and attacks a van, well, that van is _sparkling
        clean_ afterwards.


        Now, let's say _someone else_ puts *their little orange pill* under the faucet.  Not on their tongue, _under the faucet_.  And this triggers a different catalysm, which
        births a set of wailing sponge sextuplets.  *Umbilical cords and everything.*  Still very handy for cleaning the van.
        But an altogether different kind of chamois.  And, one day, these eight will stir Papa to tears when they perform the
        violin concerto of their lives.


        Metaprogramming is packing code into pill-form, such that a slender drop of water could trigger it to expand.
        More importantly, you can control the pill's reaction, so that a brontosaurus is produced, scaly and lumbering.
        Or septulets, *CERTAINLY*.  Or seamstresses.  Or cat brains.  Or dragons.


        <pre>
         class Dragon < Creature
           life 1340     # tough scales
           strength 451  # bristling veins
           charisma 1020 # toothy smile
           weapon 939    # fire breath
         end
        </pre>


        This is not metaprogramming yet.  Only the pill.  The _product_ of metaprogramming.  We are pausing, looking at
        the beast itself before descending beneath its flesh with a scalpel and microscope.


        The @Dragon@ is a class.  You've seen that many times now.  The @Dragon@ is a descendant of the @Creature@ class.


        Now, eyes up.  Look at me.  The @Creature@ class contains the metaprogramming code.  You can write metaprogramming
        code which can be used _everywhere_, throughout Ruby, in @Creature@ or @Dragon@, in @String@ or in @Object@, anywhere.
        Our example here, since this is the most common form of meta-code, focuses on metaprogramming inside your own
        classes only.


        Each of the @Dragon@'s traits are simply *class methods*.  You could also write this as:


        <pre>
         class Dragon < Creature
           life( 1340 )     # tough scales
           strength( 451 )  # bristling veins
           charisma( 1020 ) # toothy smile
           weapon( 939 )    # fire breath
         end
        </pre>


        Removing the parens removes clutter, so let's leave them out.  Only use parens when you are using
        several methods together and you want to be very clear.


        h3. Creature Code


        Now, with a lateral slice across the diaphragm, we expose the innards of @Creature@.  *Save this
        code into a file called @dwemthy.rb@.*


        <pre>
         # The guts of life force within Dwemthy's Array
         class Creature

           # Get a metaclass for this class
           def self.metaclass; class << self; self; end; end

           # Advanced metaprogramming code for nice, clean traits
           def self.traits( *arr )
             return @traits if arr.empty?

             # 1. Set up accessors for each variable
             attr_accessor *arr

             # 2. Add a new class method to for each trait.
             arr.each do |a|
               metaclass.instance_eval do
                 define_method( a ) do |val|
                   @traits ||= {}
                   @traits[a] = val
                 end
               end
             end

             # 3. For each monster, the `initialize' method
             #    should use the default number for each trait.
             class_eval do
               define_method( :initialize ) do
                 self.class.traits.each do |k,v|
                   instance_variable_set("@#{k}", v)
                 end
               end
             end

           end

           # Creature attributes are read-only
           traits :life, :strength, :charisma, :weapon
         end
        </pre>


        Focus on the closing lines of code, specifically the line where the @traits@ are
        being set up.  All of the code before that line sets up the @traits@ class
        method.  This bears resemblance to the basic lottery tickets from the chapter previous.
        

        <pre>
         class LotteryTicket
           attr_reader :picks, :purchased
         end
        </pre>
