    - >
        "Eu não visito o meu planeta há muito tempo.  Seria difícil considerá-lo minha casa
        a esta altura do campeonato."


        "Bem, Warren Beatty é maravilhoso.  Sua personagem é basicamente socialmente aleijada.  Ele
        até tenta se matar, mas Dustin Hoffman senta no peitoril da janela e começa a chorar
        e cantar uma música totalmente hilária, é de partir o coração.  Eu tenho ele aqui,
        você devia assistí-lo."


        "Posso pegar algo para comer?" perguntou o Doutor.  E ainda se sentia sujo.


        "How about we watch a film and you can have a buttermelon with tentacles?" said the goat.


        So, they worked their way back toward the goat's projector.  Back by the freezer locker,
        they sat on a giant rug and broke off the appendages of frozen buttermelons.  The shell
        was solid, but once it cracked, rich fruit cream was in abundance.  Sweet to taste and
        a very pleasant scent.


        "First film, you've got to see," said the goat.  "Locally filmed and produced.  I'm
        good friends with the lady who did casting.  Dated her for awhile.  Knew everyone
        who was going to play the different roles long before it was announced."


        The goat set the projector by Dr. Cham.  "I ve got the music on the surround sound.
        You can man the knob."


        !i/filmstrip-1.gif(The Originals and their lonesome planet.)!


        Dr. Cham's mind wandered at this point in the presentation, just as the land war
        mounted between the two throngs of animal settlers.  The details of their wars
        and campaigns continued to consume the spool of transparent film that Dr. Cham
        was feeding through the projector.  


        War after war after war.  The Sieging of Elmer Lake.  The Last Stand of Newton P. Giraffe
        and Sons.  Dog Invasion of Little Abandoned Cloud.  Nenhum animal morreu nessas guerras. 
        Most often an attack consisted of bopping another
        animal on the head.  And they philipped each other s noses.  But, believe me,
        it was humiliating.


        Blasted crying shame.  Things could have worked out.


        h3. O Nascimento de um Objeto


        "Não se preocupe," disse a cabra, anxious to sway Dr. Chams attention back to the film.  "Things _do_
        work out."


        No Ruby, o Objeto é o centro exato das todas as coisas.  Ele é O Original.


        <pre>
         class UrsoTostado < Object; end
        </pre>


        The angle bracket indicates *inheritance*.  Isto significa que a nova classe @UrsoTostado@
        é um nova classe baseada na classe @Objeto@.  Todo método que @Objeto@ tem vai estar
        disponível na @UrsoTostado@.  Constantes disponíveis em @Objeto@ vão estar disponíveis em
        @UrsoTostado@.


        Mas todo objeto é herdeiro de @Object@.  O código...


        <pre>
         class UrsoTostado; end
        </pre>


        É idêntico a...


        <pre>
         class UrsoTostado < Object; end
        </pre>


        Herança é útil.  Você pode criar espécies de objetos que se relacionam entre si.
        Quase sempre, quando você está dissecando um problema, você vai se deparar com vários objetos que
        compartilham atributos.  Você pode ter menos trabalho herdando de classes que já solucionam
        parte desse problema.


        Você pode ter uma classe @BrasilEndereco@ que guarda o endereço, cidade, estado,
        e cep de alguem que more no Brasil.  Quando você começar a guardar endereços
        da Inglaterra, você pode adicionar uma classe @ReinoUnidoEnderecos@.  Se você então
        garantir que os dois endereços herdem de uma classe mãe @Endereco@, você pode
        planejar seu software de correspondência de modo que aceite todo tipo de endereço.


        <pre>
         def envie_a_eles_um_kit( endereco )
           unless endereco.is_a? Endereco
             raise ArgumentError, "Objeto Endereco não encontrado."
           end
           print endereco.formatted
         end
        </pre>
 

        Além disso, herança é ótimo se você quer sobreescrever certos comportamentos numa classe.
        Por exemplo, talvez você queira fazer a sua própria variação variation to the @Array@ class.
        You want to enhance the @join@ method.  But if you change @Array#join@ directly, you
        will affect other classes in Ruby that use Arrays.


        Então você começa sua própria classe chamada @MeuArray@, que é baseada na classe @Array@ original.
        

        <pre>
         class MeuArray < Array
           # Contruir uma string neste array, formatando cada entrada
           # e depois as unindo.
           def join( sep = $,, format = "%s" )
             collect do |item|
               sprintf( format, item )
             end.join( sep )
           end
         end
        </pre>


        @MeuArray@ é agora uma classe @Array@ customizada com o seu próprio método @join@.  @Array@ é
        a *superclass (classe-superior, classe-mãe)* do @MeuArray@.  Cada objeto tem um método @superclass@ 
        onde você pode verificar esta relação.


        <pre>
         irb> MinhaArray.superclass
           => Array
        </pre>


        Perfeito.  Nós administramos um hotel e nós temos uma @Array@ dos tamanhos dos nossos quarots: @[3, 4, 6]@.
        Vamos imprimir isso de um jeito bacana pra encadenarmos.


        <pre>
         quartos = MinhaArray[3, 4, 6]
         print "Nós temos quartos de " + quartos.join( ", ", "%d camas" ) + " disponíveis."
        </pre>


        Que imprime, "Nós temos quartos de 3 camas, 4 camas, 6 camas disponíveis."


        Dr. Cham estava procurando por um banheiro, but archival video tape was everywhere.
        Ele acabou encontrando um lugar, que poderia ser um banheiro.  Tinha um vaso de metal.
        Mas mais importante, era escuro e escondido.
        

        Enquanto s in there, let me add that enquanto Os Originais slaughtered The Invaders
        to prove their rights as First Creatures, o Objeto Ruby Object não disputou nada.
        Ele é rei absoluto Objeto o Primeiro.


        Observe.


        <pre>
         irb> Class.superclass
           => Module
         irb> Kernel.class
           => Module
         irb> Module.superclass
           => Object
         irb> Object.superclass
           => nil
        </pre>


        Até @Classe@ é um @Objeto@!  Veja, mesmo as classes sendo linguagem de definição para objetos,
        nós ainda pode mos chamar métodos de classe nelas e tratá-los como objetos ocasionalmente.  It may seem
        like a dizzying circle, but it s truly a very strict parentage.  E garante que quando você
        altera o @Object@, você altera *tudo no Ruby*.  Which is impossibly scary and all-powerful
        and cataclysmic and awesome!  *Ruby não te restringe, minha irmã, meu irmão!* 


        Entre @Class@ e @Object@, você vê @Module@?  Se @Object@ é o rei, the one who has
        sired every other part of Ruby, then @Module@ is the poor waifish nun, shielding
        and protecting all her little Ruby townspeople children.  (To complete the analogy:
        @Class@ é a professora da escola da vila e @Kernel@ é the self-important colonel.)


        O motivo da existência do @Module@ é dar comida e abrigo a código.  Métodos
        podem ficar abrigados embaixo da manta do @Module@.  @Module@ pode conter classes, constantes e 
        variáveis de qualquer tipo.


        "Mas o que um Module _faz_?" você pergunta.  "Como ele é lucrativamente utilizado??"


        "Isso é tudo que ele faz!!" Eu replico, mostrando as palmas da mão na maior expressão
        de futilidade conhecida pelo homem.  "Agora me escute -- pois não me repetirei -- essa 
        Mãe Módulo Superior deu a estes pobres objetos um lugar pra morar!!"


        <pre>
         # Veja, aqui está o module -- onde mais seu código poderia estar?
         module AtenciosaSantaInes

           # Uma CONSTANTE repousa perto da porta.  Ótimo.
           HOMEM_DESDENTADO_COM_GARFO = ['homem', 'garfo', 'exposed gums']

           # Uma Class está comendo, vivendo bem na cozinha.
           class CriancaGordaDeCera; end

           # Um Método está se escondendo lá atrás no armário banana, Deus sabe porquê.
           def timida_garota_com_cara_de_raposa; {'please' => 'eu quero uma bolota de carvalho por favor'}; end

         end
        </pre>
           
           
        Agora você tem que ir pela Santa Inês para achá-los.


        <pre>
         >> AtenciosaSantaInes::HOMEM_DESDENTADO_COM_GARFO
         => ["homem", "garfo", "exposed gums"]
         >> AtenciosaSantaInes::CriancaGordaDeCera.new
         => #<AtenciosaSantaInes::FatWaxyChild:0xb7d2ad78>
         >> AtenciosaSantaInes::instance_methods
         => ["timida_garota_com_cara_de_raposa"]
        </pre>


        Lembre-se sempre que um @Module@ é somente um hotel.  Um teto sob as cabeças deles.  Ele não é uma
        auto-consciente @Classe@ e,  portanto, não pode ser trazida à vida com @new@.


        <pre>
         >> AtenciosaSantaInes.new
         NoMethodError: undefined method `new' for AtenciosaSantaInes:Module
                 from (irb):2
        </pre>


        Santa Inês deu a própria vida pra cuidar desses pedaços de código desesperados.
        Por favor.  Não tire isso dela.


        Se, todavia, você quer roubar da Santa Inês, eu posso te ajudar.
        Você pode arrumar um grande mosteiro pra engrupir o ministério da @AtenciosaSantaInes@ e daí
        o quê sobrará pra ela?


        Para isso você pode usar @extend@, que vai puxar todos os métodos do módulo pra dentro de uma classe ou um objeto.


        <pre>
         >> class FundacaoDeAmorEAmparoTimeWarnerAolCitibank; end
         >> FundacaoDeAmorEAmparoTimeWarnerAolCitibank.extend AtenciosaSantaInes
         >> FundacaoDeAmorEAmparoTimeWarnerAolCitibank::instance_methods
         => ["timida_garota_com_cara_de_raposa"]
        </pre>


        Na verdade, ninguém _roubou_ da @AtenciosaSantaInes@, somente pegaram emprestado.
        A @timida_garota_com_cara_de_raposa@ agora tem dois endereços.


        Você deve admitir.  O velho mosteiro pode ser comprado um zilhão de vezes e a pequena garota-com-cara-de-raposa
        _ainda_ estará nos fundos no armário banana esperando uma bolota de carvalho!  Que pena que não podemos alimentá-la.
        Ela é um método sem argumentos.


        When Dr. Cham came out refreshed, the filmstrip was a bit behind.  Mas a cabra não notou,
        então o Doutor avançou alguns quadros até fazer algum sentido.


        !i/filmstrip-2.gif(The goats that told a planet it was ugly.)!


        Então os invasores deixaram o planeta.


        "Este planeta _é_ decrépito," disse o Dr. Cham.  "O castelo é bacana.  Mas por dentro
        é um desastre."


        "O castelo parece uma projeção," disse a cabra.  "All the flowers
        and apple blossoms and the sky even.  É uma projeção de baixa resolução."


        "Sim?  Ele é encantador."


        "I guess."


        !i/filmstrip-3.gif(The spool ends.)!


        "That's messed up!" said the goat.  "Não é assim que o filme termina!
        Não teve sangue!  O que aconteceu?  O que aconteceu?  Você apertou o botão errado, idiota?"


        "Bem, eu não sei," disse o Dr. Cham.  Ele girou o botão pra frente e pra trás.
        Tapped the lens.


        "Cheque a fita!  Cheque a fita!"


        Dr. Cham tirou um pedaço do filme do alimentador do projetor, derretido e pingando
        nas pontas.


        "Maldição!  Estes projetores são de qualidade!  Nunca vi isso acontecer.  Não pode ser."


        h3. Hunting For a Voice


        "Eu não acho que tenha sido o projetor," disse o Dr. Cham.  "Something flew across that screen
        and uttered a blistering moan."


        "I don't have any dupes of that movie," said the goat somberly.  "And that girl.  That casting
        director.  I never see her anymore."


        Dr. Cham stood up and looked over the dumpy aisles of magnetic carnage, searching.


        "Oh, hey, you should call that girl," the goat went on. "You could talk to her, get an understanding.
        Tell her about me.  Don't act like your my friend, just, you know, 'Oh, that guy?
        Yeah, whatta maroon.'"


        Dr. Cham spotted the doorway and exited.


        The hallways were an entirely new world of mess.  In the goat's archives, the shelves had been messy.
        In the hallway, shelves were completely tipped.  Sinks were falling through the ceiling.  
        The Doctor ventured under the debris, kicking through plywood when necessary.


        "You shouldn't be out here," said the goat.  "You're on someone else's property at this point.
        A couple of pygmy elephants own all this.  They're nasty guys.  They'll beat the crap outta you
        with their trunks.  They ball it up and just whack ya."


        Dr. Cham pushed a file cabinet out of his way, which fell through a flimsy wall, then through
        the floor of the next room over.  And they heard it fall through several floors after that.


        "I'm trying to remember how it goes in the book," said Dr. Cham, as he walked swiftly through
        the hall.  "That milky fog that swept
        across the projection.  We find that thing."  He jiggled a door handle, broke it off.  Forged
        through the doorway and disappeared inside.


        "You really get a kick out of beating stuff up, don't you?" said the goat.  "Walls, doors."
        The goat headbutted a wall.  The wall shuddered and then laid still.


        Then, it was quiet.  And black.


        The goat stayed put in the bleak hallway, expecting Dr. Cham to flip over a few desks and emerge,
        ready to move on from the room he'd busted into.  But Dr. Cham didn't return, and the goat opted
        to share a moment with the neglected wreckage left by his neighbors.  Not that he could see at all.
        He could only hear the occassional rustling of the piles of invoices and carbon copy masters and
        manila envelopes when he shifted his legs.


        The ground seemed to buckling right under the goat, as if the heaps of kipple around him were
        beginning to slide toward his weight.  He would be at the center of this whirlpool of elephant
        documentation.  Would he die of papercuts first?  Or would he suffocate under the solid burial
        by office supplies?


        A soft light, however, crept up to him.  A floating, silver fish.  No, it was a -- was it scissors?
        The scissors grew into a shimmering cluster of intellegent bread, each slice choking on glitter.
        But, no, it was hands.  And an Easter hat.


        !i/hannah-1.gif(The goat alone in the hallway, meets an apparition.)!


        In another room, Dr. Cham stood under the clear glass silently.  The ceiling had abruptly
        gone transparent, then starlight washed over his pants and jacket.  He walked further to
        the room's center in muted colors, lit as softly as an ancient manuscript in its own box at
        the museum.  More stars, more cotton clusters of fire, unveiled as he came across the floor.
        And it peeked into view soon enough, he expected it to be larger, but it wasn't.


        Earth.  Like a painted egg, still fresh.  He felt long cello strings sing right up
        against his spine.  How could that be called Peoplemud?  Here was a vibrant and grassy
        lightbulb.  The one big ball that had something going for it.


        He thought of The Rockettes.  Actually, he missed The Rockettes.  What a bunch of
        great dancers.  He had yelled something to The Rockettes when he saw them.  Something
        very observant and flattering.


        Oh, yes, while The Rockettes were spinning, arm in arm, he had yelled, "Concentric circles!"
        Which no one else cared to observe. 
        

        And this thought was enough to feed Dr. Cham's superiority complex.  He wore a goofy
        smile as he retraced his footsteps.  He truthfully felt his genius coming through in
        such a statement.  To realize the simplicity of a circle was his.  He reflected on it
        all the way back to the hallway.


        Which I think is great.  Adore yourself when you have a second.

 
        !i/hannah-2.gif(The Doctor knows this ghost.)!


        "Oh, right," said the goat.  "Your niece.  The niece you killed.  I'm with ya now."


        For just a few moments, they all looked at each other.  Just enough
        time for both Dr. Cham and the goat to think: _Oh, yeah.  Hannah
        causes us a lot of trouble.  She's already talking about maple donuts._


        "Does she start talking about maple donuts right away like that?"
        asked the goat.


        "Yes, she does," said the Doctor.  "She brings it up to you, then
        she brings it up to me.  She sees a maple donut somewhere -- I don't
        quite remember where."


        "Do I see a real maple donut?" Hannah said.  "I need a real one."


        "Okay, okay," said the goat.  "Yeah, I remember: here's where she says
        that if she gets a real maple donut, she'll become a real person again.
        Because her real destiny was to own a bakery and you ruined that destiny
        and now she's trapped as a ghost."


        "Hey, that's the truth!" Hannah yelped.


        "It's terrible that we must bear through this whole scene again," said
        the Doctor.  "The donuts are immaterial.  They should be left out altogether."


        "Man, I am having a _hard_ time remembering all of this chapter," said
        the goat.  "I don't even remember how to get out of this hallway.  I must
        have read that book like thirty times.  Do we blast through a wall?   Do
        we scream until someone finds us?"


        "We get Hannah to float through walls and she finds some kind of machine,"
        says Dr. Cham.  "I have to write a program -- it all works out somehow."


        "But, you know what I'm saying?" said the goat.  "I forget all the details.
        Especially the earlier chapters.  I mean I can remember the ending perfectly.
        It's hard to sit through all this.  The end is so much better."


        Dr. Cham folded his arms and teetered on a heel.  "The porcupine."  He
        smiled greedily at the goat.


        "Oh, totally.  The porcupine is definitely who I want to meet," said the
        goat.  "I wonder what he does with all that money when the book is over."


        Dr. Cham nodded respectfully.  "I'm very excited to see him wearing slippers."


        "Those infernal slippers!" said the goat and he haw-hawed coarsely, a shower
        of saliva cascading from his jaws.


        Hannah's mind rattled, waiting for this nonsense to break for a moment.
        She tipped her head on its side and the rattle slid along the curve of
        her cranium.  The little noise died away, though, as the back of her head
        vanished (_fluxed out_ is what she called it) and then her head was  
        back again with its little rattle and she caught herself doing that
        careless moaning again.  *HRRRRRR-RRR-OH-RRRR-RRRR.*


        "I'm not as into the chunky bacon stuff," said the goat.  "I don't see
        what's so great about it."


        Could she speak while moaning? *BON-BON.*  Com um sotaque francês.  *BOHN-BOHN.
        BOHN-APPE-TEET-OHHHH-RRRR.*


        "I know she's harmless, but that sound freaks me out.  My hair is
        *completely* on end."


        "Hannah?" disse o Dr. Cham.  "Onde você está, criança?  Come do a good turn
        for us, my niece."


        She was right near them, in and out.  And they could hear her
        cleaning up her voice, bright, speaking like a angel scattering stardust.
        Yes, the whole maple donut story came out again, and more about the
        bakery she would own, the muffins and rolls and baguettes.


