    - >
        Grim prospects.  I can't ask you to return to the rabbit kingdom, though.
        Just pretend like you didn't die and make a whole new rabbit.


        <pre>
         irb> r = Rabbit.new

         # attacking with boomerang!
         irb> r ^ s

         # the hero's sword slashes!
         irb> r / s

         # eating lettuce gives you life!
         irb> r % s

         # you have three bombs!
         irb> r * s
        </pre>


        Pretty neat looking, wouldn't you say?  The code in @rabbit.rb@ alters a few math symbols
        which work only with the @Rabbit@.  Ruby allows you to change the behavior of math operators.  After all,
        *math operators are just methods!*


        <pre>
         # the boomerang is normally an XOR operator.
         irb> 1.^( 1 )
           => 0

         # the hero's sword normally divides numbers.
         irb> 10./( 2 )
           => 5

         # the lettuce gives the remainder of a division.
         irb> 10.%( 3 )
           => 1

         # the bomb is for multiplication.
         irb> 10.*( 3 )
           => 30
        </pre>


        Where it makes sense, you may choose to use math operators on some of your Classes.  Ruby
        uses these math operators on many of its own classes.  Arrays, for example, have a handful
        of math operators which you can see in the list of instance methods when you type: @ri Array@.


        <pre>
         # the plus operator combines two arrays into a single array
         irb> ["D", "W", "E"] + ["M", "T", "H", "Y"]
           => ["D", "W", "E", "M", "T", "H", "Y"]

         # minus removes all items in the second array found in the first
         irb> ["D", "W", "E", "M", "T", "H", "Y"] - ["W", "T"]
           => ["D", "E", "M", "H", "Y"]

         # the multiplier repeats the elements of an array
         irb> ["D", "W"] * 3
           => ["D", "W", "D", "W", "D", "W"]
        </pre>


        You may be wondering: what does this mean for math, though?  What if I add the number three
        to an array?  What if I add a string and a number?  *How is Ruby going to react?*


        Please remember these operators are just methods.  But, since these operators _aren't readable
        words_, it can be harder to tell what they do.  Use @ri@.  Often you'll find that the operators
        are identical to other readable methods.  You can then choose to use the operator or the method.
        Whichever is clearer to you.


        <pre>
         # divide with an operator method ...
         irb> 10 / 3
           => 3

         # ... or a readable method?
         irb> 10.div 3
           => 3
        </pre>


        And that's how the Rabbit's sword divides. 


        h3. The Harsh Realities of Dwemthy's Array AWAIT YOU TO MASH YOU!!


        Once you're done playchoking the last guy with his oxygen tube, it's time
        to enter The Array.  I doubt you can do it.  You left your hatchet at home.  And
        I hope you didn't use all your bombs on the easy guy.


        You have six foes.


        <pre>
         class IndustrialRaverMonkey < Creature
           life 46
           strength 35
           charisma 91
           weapon 2
         end

         class DwarvenAngel < Creature
           life 540
           strength 6
           charisma 144
           weapon 50
         end

         class AssistantViceTentacleAndOmbudsman < Creature
           life 320
           strength 6
           charisma 144
           weapon 50
         end

         class TeethDeer < Creature
           life 655
           strength 192
           charisma 19
           weapon 109
         end

         class IntrepidDecomposedCyclist < Creature
           life 901
           strength 560
           charisma 422
           weapon 105
         end

         class Dragon < Creature
           life 1340     # tough scales
           strength 451  # bristling veins
           charisma 1020 # toothy smile
           weapon 939    # fire breath
         end
        </pre>