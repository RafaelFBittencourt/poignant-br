

      h3. Reading the Prompt


      I know the prompt surely looks bewildering.  Well, let's not delay in dissecting it.  It's very simple.
      The prompt has three parts, each separated by *colons*.


      The first section, which reads @irb(main)@, shows *the name of the program* we are running.  The second
      section shows a line number, *a count of how many lines of Ruby we've typed*.  The third section is *a
      depth level*.  Whenever you open a statement which needs closing, the depth level will increase by one.
      And whenever Irb senses that your code is unfinished, *the end of the prompt will become an asterisk.*  


      <pre>
       irb(main):001:0> bell = :pressed
       => :pressed
       irb(main):002:0> ice_gun =
       irb(main):003:0*   if bell == :pressed
       irb(main):004:1>     :on
       irb(main):005:1>   else
       irb(main):006:1*     :off
       irb(main):007:1>   end
       => :on
      </pre>
        

      Notice how the depth level increased to 1 when I opened the @if@ statement.  And how the asterisk
      indicates the continuation of a line.


      h3. Tweaking the Prompt


      You don't have to like the prompt's appearance, though.  I'm not forcing you to do anything and,
      if you want to hack it up, I'm right here beside you.


      Irb has a few other included prompts which may better appease your senses.  Try @irb --prompt simple@.
      This time Irb will treat you to a very basic set of arrows, allowing you to enter your code without
      the whole status report.


      <pre>
       >> %w(my best friend's arm)
       => ["my", "best", "friend's", "arm"]
       >> 
      </pre>


      Ruby comes with a few prompts.  The *simple* prompt seen above.  The *xmp* prompt which has no
      prompt at all and indents the answer arrow.  (It's supposed to look nice for printing.)  Also,
      the *null* prompt, which eliminates prompts altogether.  Set the prompt by just supplying the
      name with the @--prompt@ option.  (So, @irb --prompt null@.)


      Making your own prompt is okay as well.  Irb is completely customizable from inside of itself.
      The @conf@ object contains all of Irb's configuration settings.  Some of these configuration
      settings are for controlling the prompt.


      <pre>
       >> conf.methods.grep /prompt/
       => ["prompting?", "prompt_s", "prompt_s=", "prompt_c", "prompt_c=", 
           "prompt_i", "prompt_mode", "prompt_i=", "prompt_mode="]
      </pre>


      Let's setup our prompt to display line numbers with just a bit of decor.


      <pre>
       >> conf.prompt_i = "%3n :> "           # the normal prompt
       >> conf.prompt_s = "%3n .%l "          # the string continuation prompt
       >> conf.prompt_c = "%3n .^ "           # the code continuation prompt
       >> conf.return_format = "    => %s\n"  # the answer arrow
      </pre>


      Above are the four parts to an Irb prompt.  The string continuation prompt is displayed when
      a string is still open when you hit _Enter_.  The @%3n@ describes that Irb should reserve three
      characters for the line number.  The @%l@ saves a place for displaying the type of string being
      continued.  (If you're continuing a double-quoted string, it shows a double quote.  If you're
      continuing a regular expression, it shows a slash.)


      The rest are little symbols to decorate the prompt.  So, in the case of a continuing code line,
      I show a caret which points up to the line where that line of code started. 


      You can read more about customizing Irb and saving your configuration to a file in 
      the complete "guide to Irb":http://www.rubycentral.com/book/irb.html, available in
      the free-for-your-wandering-Internet-eyes _Programming Ruby_.


