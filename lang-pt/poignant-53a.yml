        <pre>
         irb> RUBY_VERSION
           => "1.8.3"
        </pre>


        Ruby was up-to-date.  What else could he do?  Scanning @constants@ and @class_variables@ was pointless.
        The only reason that had worked with the @Elevator@ class was because someone had left @irb@ running
        with their classes still loaded.


        He had just loaded this @irb@, so no special classes were available yet.  He had to find some classes.
        He started by loading the @`rbconfig`@ file to get an idea of what Ruby's settings were.


        <pre>
         irb> require 'rbconfig'
           => true
         irb> Config::CONFIG
           => {"abs_srcdir"=>"$(ac_abs_srcdir)", "sitedir"=>"bay://Ruby/lib/site_ruby", ... }
        </pre>


        Too much information to sort through there.  The @Config::CONFIG@ constant is a Hash that
        contains every environment setting used to setup Ruby.  You can find the operating system
        name at @Config::CONFIG['host_os']@.  The directory where core Ruby libraries are stored
        can be found at @Config::CONFIG['rubylibdir']@.  Ruby programs can store helper files at
        @Config::CONFIG['datadir']@.
        

        What Dr. Cham really needed, though, was a list of all the libraries that aren't core Ruby
        libraries.  Libraries which were installed by The Originals or whoever manned this console.
        He checked a few global variables for this information.


        <pre>
         irb> $"
           => ["irb.rb", "e2mmap.rb", "irb/init.rb", ... "rbconfig.rb"]
         irb> $:
           => ["bay://Ruby/lib/site_ruby/1.9", "bay://Ruby/lib/site_ruby/1.9/i686-unknown",
               "bay://Ruby/lib/site_ruby", "bay://Ruby/lib/1.9", 
               "bay://Ruby/lib/1.9/i686-unknown", "."]
        </pre>


        Aha, good.  Dr. Cham stroked his beard and looked over his @irb@ session.  The @$"@ global variable
        contains an Array of every library which has been loaded with @require@.  Most of these libraries
        had been loaded by @irb@.  He had loaded @'rbconfig.rb'@ earlier, though.


        The @$:@ global variable, which can also be accessed as @$LOAD_PATH@, contains a list of all
        the directories which Ruby will check when you try to load a file with @require@.  When Dr.
        Cham ran @require 'rbconfig'@, Ruby checked each directory in order.


        <pre>
         bay://Ruby/lib/site_ruby/1.9/rbconfig.rb
         bay://Ruby/lib/site_ruby/1.9/i686-unknown/rbconfig.rb (*)
         bay://Ruby/lib/site_ruby/rbconfig.rb
         bay://Ruby/lib/1.9/rbconfig.rb
         bay://Ruby/lib/1.9/i686-unknown/rbconfig.rb
         ./rbconfig.rb
        </pre>


        The second path was where Ruby ended up finding the rbconfig.rb file.  Dr. Cham guessed that
        the first five paths were *absolute paths*.  These were paths to directories on a drive called
        @bay@.  Absolute paths may vary on your system.  On Windows, absolute paths will start with
        a drive letter.  On Linux, absolute paths start with a slash.


        The directory @"."@ indicates a *relative path*.  The lone period represents the current
        work directory.  The directory where Dr. Cham started up @irb@.  So, after Ruby has searched
        all the standard places, it checks the current directory.


        The goat had peeked his head around Dr. Cham and was watching all these instructions
        transpire, as he licked his lips to keep his salivations from running all over the monitors
        and glossy buttons.  He had been interjecting a few short cheers (along the lines of:
        _No, not that_ or _Yes, yes, right_ or _Okay, well, your choice_), but now he was
        fully involved, recommending code, "Try @require 'setup'@ or, no, try
        @3 * 5@.  Make sure that basic math works."


        "Of course the math works," said Dr. Cham.  "Let me be, I need to find some useful classes."


        "It's a basic sanity test," said the goat.  "Just try it.  Do @3 * 5@ and see what
        comes up."


        Dr. Cham caved.


        <pre>
         irb> 3 * 5
           => 15
        </pre>


        "Okay, great!  We're in business!" the goat tossed his furry face about in glee.
        

        Dr. Cham patted the goat's head, "Well done.  We can continue."


        <pre>
         irb> Dir.chdir( "bay://Ruby/lib/site_ruby/1.9/" )
           => 0
         irb> Dir["./*.{rb}"]
           => ['endertromb.rb', 'mindreader.rb', 'wishmaker.rb']
        </pre>


        Dr. Cham had use @chdir@ to change the current working directory over the the first
        path listed in @$LOAD_PATH@.  This first path in @site_ruby@ is a common place to store
        custom classes.


        Here were the three legendary classes that my daughter's organ instructor had inscribed
        for me earlier in this chapter.  And, Dr. Cham, having read this selfsame chapter, recognized
        these three pieces of the system immediately.


        The @Endertromb@ class which contained the mysteries of this planet's powers.  The @MindReader@
        class which, upon scanning the minds of its inhabitants, read each mind's contents.  And, finally,
        the crucial @WishMaker@ class which powered the granting of ten-letter wishes, should the wish
        ever find its way to the core of Endertromb.


        "How about @4 * 56 + 9@?" asked the goat.  "We don't know if it can do compound expressions."


        "I've got the @MindReader@ right here," said Dr. Cham.  "And I have the @WishMaker@ here next to it.
        This planet can read minds.  And this planet can make wishes.  Now, let's see if it can do both at
        the same time."


