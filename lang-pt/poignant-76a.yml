

        |\3. *Character Classes* |

        | @\d@ | matches digits | can also be written @[0-9]@ |

        | @\w@ | matches word characters (letters, numbers and the underscore) | can also be written @[A-Za-z0-9_]@ |

        | @\s@ | matches whitespace (spaces, tabs, carriage returns, line feeds) | a.k.a. @[ \t\r\n]@ |

        | @\D@ | matches everything _but_ digits | a negated set @[^\d]@ |
        
        | @\W@ | matches everything _but_ word chars | just like @[^\w]@ |
        
        | @\S@ | matches everything _but_ whitespace | also @[^\s]@ |

        | @.@ | the period matches *everything*. |


        Building a regexp involves chaining these placeholders together to express your search.  If you're looking for
        a number, followed by whitespace: @/\d\s/@.  If you're looking for three numbers in a row: @/\d\d\d/@.  *The opening
        and closing slashes mark the beginning and end of the regexp.*


        A search for three numbers in a row can also be written as: @/\d{3}/@.  Immediately following a character class
        like @\d@, you can use a quantifier symbol to mark how many times you want the character class to be repeat.


        |\3. *Quantifiers* |

        | @{n}@ | match exactly _n_ times | Precisely three numbers in a row is @/\d{3}/@ |

        | @{n,}@ | matches _n_ times or _more_ | Three or more letters in a row is @/[a-z]{3,}/i@ |

        | @{n,n2}@ | matches at least _n_ times but no more than _n2_ times | So, @/[\d,]{3,9}/@ matches
        between three and nine characters which are numbers or commas |

        | @*@ | the asterisk @*@ is short for @{0,}@ | To match a colon, followed by zero or more word characters: @/:\w*/@ |

        | @+@ | the plus is short for @{1,}@ | To match one or more minus or plus signs, use @/[-+]+/@ |

        | @?@ | the question mark is short for @{0,1}@ | To match three numbers followed by an optional period: @/\d{3}[.]?/@ |


        A really common regular expression is for matching phone numbers.  American phone numbers (including an area
        code) can be matched using the digit character class and the precise quantifiers.


        <pre>
         irb> "Call 909-375-4434" =~ /\d{3}-\d{3}-\d{4}/
           => 5
         irb> "The number is (909) 375-4434" =~ /[(]\d{3}[)]\s*\d{3}-\d{4}/
           => 14
        </pre>


        This time, instead of using @match@ to search for the expression, the @=~@ operator was used.  This operator is the
        *match operator*, an equals sign followed by *a tilde*.  The tilde is like a bit of smoke coming off the edge of a
        smokestack.  Remember the deer, the smoke they blow, a cryptic language just like regular expressions.  The smoky
        tilde points toward the regexp.


        The match operator returns a number.  The number is the spot in the string where the regular expression matched.
        So when the match operator returns @5@, it's saying, "Before the match, there are five characters in the string."


        If you need to get the full string matched, you can use the special @$&@ global variable if you're using the
        match operator.  Or, if you're using the @match@ method, you can get the full string by converting the @MatchData@ object
        to a string.


        <pre>
         # Using =~ and $& together.
         irb> "The number is (909) 375-4434" =~ /[(]\d{3}[)]\s*\d{3}-\d{4}/
           => 14
         irb> $&
           => "(909) 375-4434"

         # Using the MatchData object.
         irb> phone = /[(]\d{3}[)]\s*\d{3}-\d{4}/.match("The number is (909) 375-4434")     
           => #<MatchData:0xb7d51680>
         irb> phone.to_s
           => "(909) 375-4434"
        </pre>


        Most Rubyists prefer the second approach, as it uses an object within a _local variable_ rather than a _global variable_.
        Global variables are kind of sketchy, since they can be easily overwritten.  If you run two regular expressions in a
        row, the global variable gets overwritten the second time.  But with local variables, you can keep both matches around
        as long as the variables are named differently.


        Other than matching, another common use of regular expression is to do *search-and-replace* from within Ruby.
        You can search for the word "cat" and replace it with the word "banjo."  Sure, you can do that with strings or regexps.


        <pre>
         irb> song = "I swiped your cat / And I stole your cathodes"
         irb> song.gsub 'cat', 'banjo'
           => "I swiped your banjo / And I stole your banjohodes"

         irb> song.gsub /\bcat\b/, 'banjo'
           => "I swiped your banjo / And I stole your cathodes"
        </pre>


        The @gsub@ method is named for "global substitution."  Notice how in the first example it replaced the word "cat" and the first
        three letters of "cathodes."  Strings also have a simple @sub@ method which will substite only once.


        And so this chapter ends, with Blix and the Foxes cruising aloft the solid pink belched from a very outspoken
        deer somewhere in those pastures.


#        Using regular expressions for substitution is incredibly sly.  
#
#
#        |\3. *Positional Marks* |
#
#        | @^@ | matches the beginning of a line | Test a string for a starting pound sign: @/^#/@ |
#
#        | @$@ | matches the end of a line | Look for empty lines: @/^\s*$/@ |
#
#        | @\b@ | matches the edge of a word, beginning or end | Find words which start with a vowel: @/\b[aeiou]/@ |
#
#        | @\A@ | matches the beginning of the string | Check if a string opens with a greeting: @/AHello/@ |
#
#        | @\z@ | matches the end of the string | Ensure a string contains only word characters: @/\A\w\z/@ |
#
#
#        h3. Scanning for Matches
#
#
#        <pre>
#         def load_dictionary( filename )
#           hsh = {}
#           File.read( filename ).scan( /(.+): (.+)/ ) do |k, v|
#             hsh[k] = v
#           end
#         end
#        </pre>
#
#
#        If I can offer one piece of advice with regard to regular expressions, it's this: be yourself.  Don't get so
#        wrapped up in regular expressions that you forget who you are.
#
#
